import { GoogleGenerativeAI } from "@google/generative-ai";

const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(API_KEY);

// L·∫•y c√¢u h·ªèi t·ª´ AI
export const getQuizQuestions = async () => {
    try {
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      const prompt = `
        H√£y t·∫°o 10 c√¢u h·ªèi kh·∫£o s√°t ƒë∆°n gi·∫£n v·ªÅ s·ªü th√≠ch ƒÉn u·ªëng c·ªßa ng∆∞·ªùi d√πng.
        C√¢u h·ªèi ch·ªâ li√™n quan ƒë·∫øn c√°c y·∫øu t·ªë nh∆∞: lo·∫°i th·ªãt y√™u th√≠ch, v·ªã gi√°c (cay, m·∫∑n, ng·ªçt...), th√≥i quen ƒÉn u·ªëng.
        M·ªói l·∫ßn l√†m l·∫°i h√£y h·ªèi c√°c c√¢u ƒëa d·∫°ng h∆°n.
        M·ªói c√¢u c√≥ 4 l·ª±a ch·ªçn, ƒë·ªãnh d·∫°ng nh∆∞ sau:  
        "C√¢u h·ªèi? | ƒê√°p √°n A | ƒê√°p √°n B | ƒê√°p √°n C | ƒê√°p √°n D"  
        Ch·ªâ tr·∫£ v·ªÅ danh s√°ch c√¢u h·ªèi ƒë√∫ng ƒë·ªãnh d·∫°ng, kh√¥ng c√≥ s·ªë th·ª© t·ª±, kh√¥ng c√≥ gi·∫£i th√≠ch.
      `;
      const result = await model.generateContent(prompt);
      const responseText = await result.response.text().trim(); // X√≥a kho·∫£ng tr·∫Øng d∆∞ th·ª´a
  
      // üõ† T√°ch c√¢u h·ªèi b·∫±ng d·∫•u "|"
      const questions = responseText.split("\n").map((q, index) => {
        const parts = q.split(" | ");
        if (parts.length === 5) {
          return {
            id: index + 1, // Reset l·∫°i s·ªë th·ª© t·ª±
            question: parts[0].trim(), // C√¢u h·ªèi
            options: [parts[1], parts[2], parts[3], parts[4]].map(opt => opt.trim()), // 4 ƒë√°p √°n
          };
        }
        return null;
      }).filter(q => q !== null); // L·ªçc b·ªè c√¢u h·ªèi l·ªói
  
      return questions;
    } catch (error) {
      console.error("L·ªói l·∫•y c√¢u h·ªèi:", error);
      return null;
    }
  };
  
  
  

// L·∫•y g·ª£i √Ω m√≥n ƒÉn t·ª´ AI
export const getFoodSuggestions = async (userAnswers) => {
    try {
      if (!Array.isArray(userAnswers)) {
        console.error("userAnswers kh√¥ng ph·∫£i l√† m·∫£ng:", userAnswers);
        return null;
      }
  
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      const prompt = `
        Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn c√°c s·ªü th√≠ch ƒÉn u·ªëng sau: ${userAnswers.join(", ")}.
        D·ª±a v√†o s·ªü th√≠ch n√†y, h√£y g·ª£i √Ω 4-5 m√≥n ƒÉn ph√π h·ª£p.
        Ch·ªâ tr·∫£ v·ªÅ t√™n m√≥n ƒÉn, kh√¥ng c√≥ gi·∫£i th√≠ch.
      `;
      const result = await model.generateContent(prompt);
      return await result.response.text();
    } catch (error) {
      console.error("L·ªói l·∫•y g·ª£i √Ω m√≥n ƒÉn:", error);
      return null;
    }
  };
  
  
