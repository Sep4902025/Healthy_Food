import axios from "axios";

const API_URL = process.env.REACT_APP_API_URL;

// H√†m l·∫•y token t·ª´ localStorage
const getAuthHeaders = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

const medicalConditionService = {
  // üîπ L·∫•y t·∫•t c·∫£ ƒëi·ªÅu ki·ªán y t·∫ø
  getAllMedicalConditions: async () => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions`, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      console.log("üìå List of medical conditions:", response.data);
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå Error fetching medical conditions:", error.response?.data || error.message);
      return { success: false, message: "Failed to load medical conditions!" };
    }
  },

  // üîπ L·∫•y ƒëi·ªÅu ki·ªán y t·∫ø theo ID
  getMedicalConditionById: async (id) => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions/${id}`, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      console.log(`üìå Medical condition ID ${id}:`, response.data);
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("‚ùå Error fetching medical condition:", error.response?.data || error.message);
      return { success: false, message: "Medical condition not found!" };
    }
  },

  // üîπ Th√™m ƒëi·ªÅu ki·ªán y t·∫ø m·ªõi
  createMedicalCondition: async (data) => {
    try {
      console.log("üì§ Sending data to create medical condition:", data);
      const response = await axios.post(`${API_URL}/medicalConditions`, data, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      console.log("‚úÖ Server response:", response.data);
      return { success: true };
    } catch (error) {
      console.error("‚ùå Error creating medical condition:", error.response?.data || error.message);
      return { success: false, message: "Failed to create medical condition!" };
    }
  },

  // üîπ C·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán y t·∫ø
  updateMedicalCondition: async (id, data) => {
    try {
      console.log(`‚úèÔ∏è Updating medical condition ID ${id}:`, data);
      await axios.put(`${API_URL}/medicalConditions/${id}`, data, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      return { success: true };
    } catch (error) {
      console.error("‚ùå Error updating medical condition:", error.response?.data || error.message);
      return { success: false, message: "Failed to update medical condition!" };
    }
  },

  // üîπ X√≥a vƒ©nh vi·ªÖn ƒëi·ªÅu ki·ªán y t·∫ø
  deleteMedicalCondition: async (id) => {
    try {
      console.log(`üóë Permanently deleting medical condition ID: ${id}`);
      await axios.delete(`${API_URL}/medicalConditions/${id}`, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      return { success: true };
    } catch (error) {
      console.error("‚ùå Error permanently deleting medical condition:", error.response?.data || error.message);
      return { success: false, message: "Failed to permanently delete medical condition!" };
    }
  },

  // üîπ T√¨m ki·∫øm ƒëi·ªÅu ki·ªán y t·∫ø theo t√™n
  searchMedicalConditionByName: async (name) => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions/search?name=${name}`, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      console.log(`üìå Search results for medical condition name "${name}":`, response.data);
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå Error searching medical conditions:", error.response?.data || error.message);
      return { success: false, message: "Failed to search medical conditions!" };
    }
  },
};

export default medicalConditionService;