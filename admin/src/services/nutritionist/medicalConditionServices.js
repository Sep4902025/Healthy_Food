import axios from "axios";

const API_URL = process.env.REACT_APP_API_URL;

// H√†m l·∫•y token t·ª´ localStorage
const getAuthHeaders = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

const medicalConditionService = {
  // üîπ L·∫•y t·∫•t c·∫£ ƒëi·ªÅu ki·ªán y t·∫ø
  getAllMedicalConditions: async (page = 1, limit = 10, search = "") => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions`, {
        headers: getAuthHeaders(),
        withCredentials: true,
        params: {
          page,
          limit,
          search, // Th√™m t√¨m ki·∫øm
          sort: "createdAt", // S·∫Øp x·∫øp theo ng√†y t·∫°o
          order: "desc",     // Gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n tr∆∞·ªõc)
        },
      });
      console.log("üìå List of medical conditions:", response.data);
      return {
        success: true,
        data: {
          items: response.data.data.items || [],
          total: response.data.data.total || 0,
          currentPage: response.data.data.currentPage || page,
          totalPages: response.data.data.totalPages || 1,
        },
      };
    } catch (error) {
      console.error(
        "‚ùå Error fetching medical conditions:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message || "Failed to load medical conditions!",
      };
    }
  },
  

  // üîπ L·∫•y ƒëi·ªÅu ki·ªán y t·∫ø theo ID
  getMedicalConditionById: async (id) => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions/${id}`, {
        headers: getAuthHeaders(),
        withCredentials: true,
      });
      console.log(`üìå Medical condition ID ${id}:`, response.data);
      return {
        success: true,
        data: response.data.data,
      };
    } catch (error) {
      console.error(
        "‚ùå Error fetching medical condition:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message || "Medical condition not found!",
      };
    }
  },

  // üîπ Th√™m ƒëi·ªÅu ki·ªán y t·∫ø m·ªõi
  createMedicalCondition: async (data) => {
    try {
      console.log("üì§ Sending data to create medical condition:", data);
      const response = await axios.post(`${API_URL}/medicalConditions`, data, {
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "application/json",
        },
        withCredentials: true,
      });
      console.log("‚úÖ Server response:", response.data);
      return {
        success: true,
        data: response.data.data,
      };
    } catch (error) {
      console.error(
        "‚ùå Error creating medical condition:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message ||
          "Failed to create medical condition!",
      };
    }
  },

  // üîπ C·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán y t·∫ø
  updateMedicalCondition: async (id, data) => {
    try {
      console.log(`‚úèÔ∏è Updating medical condition ID ${id}:`, data);
      const response = await axios.put(
        `${API_URL}/medicalConditions/${id}`,
        data,
        {
          headers: {
            ...getAuthHeaders(),
            "Content-Type": "application/json",
          },
          withCredentials: true,
        }
      );
      console.log("‚úÖ Update response:", response.data);
      return {
        success: true,
        data: response.data.data,
      };
    } catch (error) {
      console.error(
        "‚ùå Error updating medical condition:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message ||
          "Failed to update medical condition!",
      };
    }
  },

  // üîπ X√≥a m·ªÅm ƒëi·ªÅu ki·ªán y t·∫ø (soft delete)
  deleteMedicalCondition: async (id) => {
    try {
      console.log(`üóë Soft deleting medical condition ID: ${id}`);
      const response = await axios.delete(
        `${API_URL}/medicalConditions/${id}`,
        {
          headers: getAuthHeaders(),
          withCredentials: true,
        }
      );
      console.log("‚úÖ Delete response:", response.data);
      return {
        success: true,
        message: response.data.message,
      };
    } catch (error) {
      console.error(
        "‚ùå Error soft deleting medical condition:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message ||
          "Failed to soft delete medical condition!",
      };
    }
  },

  // üîπ T√¨m ki·∫øm ƒëi·ªÅu ki·ªán y t·∫ø theo t√™n
  searchMedicalConditionByName: async (name, page = 1, limit = 10) => {
    try {
      const response = await axios.get(`${API_URL}/medicalConditions/search`, {
        headers: getAuthHeaders(),
        withCredentials: true,
        params: {
          name,
          page,
          limit,
        },
      });
      console.log(
        `üìå Search results for medical condition name "${name}":`,
        response.data
      );
      return {
        success: true,
        data: {
          items: response.data.data || [],
          total: response.data.results || 0,
          currentPage: page,
          totalPages: Math.ceil(response.data.results / limit) || 1,
        },
      };
    } catch (error) {
      console.error(
        "‚ùå Error searching medical conditions:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message ||
          "Failed to search medical conditions!",
      };
    }
  },
};

export default medicalConditionService;
