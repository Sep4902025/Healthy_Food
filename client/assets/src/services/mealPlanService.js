import axiosInstance from "./axiosInstance";

const mealPlanService = {
  // L·∫•y danh s√°ch meal plans v·ªõi ph√¢n trang
  getAllMealPlans: async (page = 1, limit = 10) => {
    try {
      const response = await axiosInstance.get(`/mealPlan?page=${page}&limit=${limit}`);
      return {
        success: true,
        data: response.data.data.mealPlans,
        total: response.data.results,
        currentPage: response.data.page,
        totalPages: response.data.totalPages,
      };
    } catch (error) {
      console.error("Error fetching meal plans:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Unable to fetch meal plans",
      };
    }
  },

  // üîπ L·∫•y chi ti·∫øt m·ªôt MealPlan theo ID
  getMealPlanById: async (id) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${id}`);
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealPlan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng t√¨m th·∫•y MealPlan!" };
    }
  },
  // üîπ L·∫•y meal plan c·∫ßn thanh to√°n c·ªßa user
  getUnpaidMealPlanForUser: async (userId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/user/${userId}/unpaid`);
      if (response.data.status === "success") {
        console.log("üîç MealPlan c·∫ßn thanh to√°n:", response.data.data);
        return { success: true, data: response.data.data };
      } else {
        return { success: false, message: response.data.message || "No unpaid meal plan found" };
      }
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y MealPlan c·∫ßn thanh to√°n:",
        error.response?.data || error.message
      );
      return { success: false, message: "Kh√¥ng t√¨m th·∫•y MealPlan c·∫ßn thanh to√°n!" };
    }
  },

  // üîπ Xem chi ti·∫øt meal plan (bao g·ªìm c√°c ng√†y v√† m√≥n ƒÉn)
  getMealPlanDetails: async (mealPlanId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/details/${mealPlanId}`);
      if (response.data.status === "success") {
        console.log("üîç Chi ti·∫øt MealPlan (bao g·ªìm ng√†y v√† m√≥n ƒÉn):", response.data.data);
        return { success: true, data: response.data.data };
      } else {
        return {
          success: false,
          message: response.data.message || "Cannot fetch meal plan details",
        };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt MealPlan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt MealPlan!" };
    }
  },

  // üîπ L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa user
  getPaymentHistory: async (userId, page = 1, limit = 10) => {
    try {
      const response = await axiosInstance.get(
        `/payment/history/${userId}?page=${page}&limit=${limit}`
      );
      if (response.data.status === "success") {
        console.log("üîç L·ªãch s·ª≠ giao d·ªãch:", response.data.data);
        return {
          success: true,
          data: response.data.data,
          pagination: response.data.pagination || {
            currentPage: page,
            totalPages: 1,
            totalItems: response.data.data.length,
          },
        };
      } else {
        return { success: false, message: response.data.message || "No payment history found" };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch!" };
    }
  },

  // üîπ T·∫°o y√™u c·∫ßu thanh to√°n cho meal plan
  createMealPlanPayment: async (userId, mealPlanId, amount) => {
    try {
      const response = await axiosInstance.post(`/payment/vnpay/pay`, {
        userId,
        mealPlanId,
        amount,
      });
      if (response.data.status === "success") {
        console.log("üîç URL thanh to√°n:", response.data.paymentUrl);
        return {
          success: true,
          paymentUrl: response.data.paymentUrl,
          paymentId: response.data.paymentId,
        };
      } else {
        return { success: false, message: response.data.message || "Failed to create payment URL" };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o URL thanh to√°n:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ t·∫°o URL thanh to√°n!" };
    }
  },

  // üîπ Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n c·ªßa meal plan
  checkPaymentStatus: async (paymentId) => {
    try {
      const response = await axiosInstance.get(`/payment/status/${paymentId}`);
      if (response.data.status === "success") {
        console.log("üîç Tr·∫°ng th√°i thanh to√°n:", response.data.data);
        return { success: true, data: response.data.data };
      } else {
        return { success: false, message: response.data.message || "Cannot check payment status" };
      }
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:",
        error.response?.data || error.message
      );
      return { success: false, message: "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n!" };
    }
  },

  // L·∫•y MealPlan hi·ªán t·∫°i c·ªßa user
  getUserMealPlan: async (userId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/user/${userId}`);
      return response.data;
    } catch (error) {
      console.error("L·ªói l·∫•y meal plan c·ªßa user:", error);
      throw error;
    }
  },

  // üîπ L·∫•y danh s√°ch MealDays theo MealPlan ID
  getMealDaysByMealPlan: async (mealPlanId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${mealPlanId}/mealDay`);
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealDays:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y MealDays" };
    }
  },
  // In your mealPlanService, add this function:
  getMealDayById: async (mealPlanId, mealDayId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal`);
      return { success: true, data: response.data.data || {} };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealDay:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y MealDay" };
    }
  },
  // üîπ L·∫•y danh s√°ch Meals theo MealDay ID
  getMealsByMealDay: async (mealPlanId, mealDayId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal`);
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y Meals:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y Meals" };
    }
  },
  // L·∫•y chi ti·∫øt m·ªôt b·ªØa ƒÉn c·ª• th·ªÉ
  getMealByMealId: async (mealPlanId, mealDayId, mealId) => {
    try {
      const response = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal/${mealId}`
      );
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt b·ªØa ƒÉn:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt b·ªØa ƒÉn",
      };
    }
  },

  createMealPlan: async (mealPlanData) => {
    try {
      const requestData = { ...mealPlanData };
      console.log("üì§ G·ª≠i request POST /mealPlan v·ªõi d·ªØ li·ªáu:", requestData);
      const response = await axiosInstance.post(`/mealPlan`, requestData);
      console.log("‚úÖ Meal Plan ƒë√£ ƒë∆∞·ª£c t·∫°o:", response.data);
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o Meal Plan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ t·∫°o Meal Plan!" };
    }
  },

  // üîπ Th√™m b·ªØa ƒÉn v√†o ng√†y
  addMealToDay: async (mealPlanId, mealDayId, mealData) => {
    try {
      console.log("üì§ G·ª≠i request POST ƒë·ªÉ th√™m b·ªØa ƒÉn:", mealData);

      const response = await axiosInstance.post(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal`,
        mealData
      );

      console.log("‚úÖ B·ªØa ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m b·ªØa ƒÉn v√†o ng√†y:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ th√™m b·ªØa ƒÉn!" };
    }
  },

  // X√≥a b·ªØa ƒÉn kh·ªèi ng√†y
  removeMealFromDay: async (mealPlanId, mealDayId, mealId) => {
    try {
      console.log("üì§ G·ª≠i request DELETE ƒë·ªÉ x√≥a b·ªØa ƒÉn:", mealId);

      const response = await axiosInstance.delete(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal/${mealId}`
      );

      console.log("‚úÖ B·ªØa ƒÉn ƒë√£ ƒë∆∞·ª£c x√≥a:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a b·ªØa ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ x√≥a b·ªØa ƒÉn!" };
    }
  },

  // üîπ Th√™m m√≥n ƒÉn v√†o Meal
  addDishToMeal: async (mealPlanId, mealDayId, mealId, dish, userId) => {
    try {
      console.log("cos USERID", userId);

      // üîç L·∫•y danh s√°ch m√≥n ƒÉn hi·ªán t·∫°i c·ªßa Meal
      const mealsResponse = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal/${mealId}`
      );

      const existingDishes = mealsResponse.data.data?.dishes || [];

      // ‚ö†Ô∏è Ki·ªÉm tra xem m√≥n ƒÉn ƒë√£ t·ªìn t·∫°i hay ch∆∞a
      const isAlreadyAdded = existingDishes.some(
        (existingDish) => existingDish.dishId === dish.dishId
      );

      if (isAlreadyAdded) {
        console.warn("‚ö†Ô∏è M√≥n ƒÉn ƒë√£ t·ªìn t·∫°i trong b·ªØa ƒÉn!");
        return { success: false, message: "M√≥n ƒÉn n√†y ƒë√£ ƒë∆∞·ª£c th√™m v√†o b·ªØa ƒÉn!" };
      }

      const dishData = {
        userId: userId,
        dishes: [dish], // üî• G·ª≠i danh s√°ch m√≥n ƒÉn d∆∞·ªõi d·∫°ng m·∫£ng
      };

      console.log(`üì§ G·ª≠i request POST v·ªõi d·ªØ li·ªáu:`, dishData);

      const response = await axiosInstance.post(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal/${mealId}/dishes`,
        dishData
      );

      console.log("‚úÖ M√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m m√≥n ƒÉn v√†o Meal:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ th√™m m√≥n ƒÉn!" };
    }
  },

  // üîπ L·∫•y t·∫•t c·∫£ m√≥n ƒÉn v·ªõi ph√¢n trang
  getAllDishes: async (page, limit, search = "") => {
    try {
      const response = await axiosInstance.get("/dishes", {
        params: {
          page,
          limit,
          search, // Th√™m tham s·ªë t√¨m ki·∫øm
        },
      });
      console.log("üîç Danh s√°ch m√≥n ƒÉn t·ª´ API:", response.data);
      return {
        success: true,
        data: {
          items: response.data.data.items || [],
          total: response.data.data.total || 0,
          currentPage: response.data.data.currentPage || page,
          totalPages: response.data.data.totalPages || 1,
        },
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y m√≥n ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "L·ªói khi t·∫£i danh s√°ch m√≥n ƒÉn" };
    }
  },

  deleteDishFromMeal: async (mealPlanId, mealDayId, mealId, dishId) => {
    try {
      const response = await axiosInstance.delete(
        `/mealPlan/${mealPlanId}/mealDay/${mealDayId}/meal/${mealId}/dishes/${dishId}`
      );
      console.log("‚úÖ M√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c x√≥a:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a m√≥n ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ x√≥a m√≥n ƒÉn!" };
    }
  },
  // Status MealPlan Pause/Resume
  toggleMealPlanStatus: async (mealPlanId, isPause) => {
    try {
      console.log(`üì§ ${isPause ? "Pausing" : "Resuming"} MealPlan ID: ${mealPlanId}`);

      const response = await axiosInstance.patch(`/mealPlan/${mealPlanId}/toggle`, { isPause });

      console.log(`‚úÖ MealPlan has been ${isPause ? "paused" : "resumed"}:`, response.data);

      // Check if the response indicates success, even if reminders failed
      if (response.data.success) {
        if (response.data.message.includes("failed to update reminders")) {
          console.warn("‚ö†Ô∏è Reminders could not be updated:", response.data.message);
        }
        return { success: true, data: response.data.data };
      } else {
        return {
          success: false,
          message: response.data.message || `Could not ${isPause ? "pause" : "resume"} MealPlan!`,
        };
      }
    } catch (error) {
      console.error(
        `‚ùå Error while ${isPause ? "pausing" : "resuming"} MealPlan:`,
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message || `Could not ${isPause ? "pause" : "resume"} MealPlan!`,
      };
    }
  },
  // üîπ X√≥a MealPlan
  deleteMealPlan: async (id) => {
    try {
      console.log(`üóëÔ∏è X√≥a MealPlan ID: ${id}`);

      await axiosInstance.delete(`/mealPlan/${id}`);

      return { success: true };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a MealPlan:", error.response?.data || error.message);
      return { success: false, message: "X√≥a MealPlan th·∫•t b·∫°i!" };
    }
  },
};

export default mealPlanService;