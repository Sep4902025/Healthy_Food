import axiosInstance from "./axiosInstance"; // Import axiosInstance

const mealPlanService = {
  // Service: L·∫•y t·∫•t c·∫£ MealPlan cho admin
  getAllMealPlanAdmin: async (page = 1, limit = 10) => {
    try {
      const response = await axiosInstance.get("/mealPlan/admin", {
        params: {
          page,
          limit,
          sort: "createdAt",
          order: "desc",
        },
      });
      const data = response.data;

      if (data.status === "success") {
        const mealPlans = data.data.mealPlans || [];
        const total = data.results || 0;
        const totalPages = data.totalPages || 1;

        const summary = data.data.summary || {
          totalMealPlans: total,
          unpaidMealPlans: 0,
          activeMealPlans: 0,
        };

        console.log("Summary from API (Admin):", summary);

        return {
          success: true,
          data: {
            mealPlans,
            summary,
          },
          total,
          totalPages,
        };
      } else {
        return {
          success: false,
          message: data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch MealPlan",
        };
      }
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch MealPlan cho admin:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch MealPlan",
      };
    }
  },

  // L·∫•y danh s√°ch t·∫•t c·∫£ nutritionist v√† meal plan c·ªßa h·ªç
  getAllNutritionistsWithMealPlans: async (page = 1, limit = 10, month, year) => {
    try {
      const response = await axiosInstance.get("/mealPlan/nutritionists", {
        params: {
          page,
          limit,
          sort: "username",
          order: "asc",
          month,
          year,
        },
      });
      const data = response.data;

      if (data.status === "success") {
        const nutritionists = data.data.nutritionists || [];
        const total = data.results || 0;
        const totalPages = data.totalPages || 1;

        return {
          success: true,
          data: {
            nutritionists,
          },
          total,
          totalPages,
        };
      } else {
        console.warn("API returned non-success status:", data);
        return {
          success: false,
          message: data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch nutritionist",
        };
      }
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch nutritionist v√† meal plan:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message || "L·ªói server: Kh√¥ng th·ªÉ l·∫•y danh s√°ch nutritionist",
      };
    }
  },

  // Service: L·∫•y MealPlan do nutritionist t·∫°o
  getAllMealPlanNutritionistCreatedBy: async (page = 1, limit = 10) => {
    try {
      const response = await axiosInstance.get("/mealPlan/nutritionist/created", {
        params: {
          page,
          limit,
          sort: "createdAt",
          order: "desc",
        },
      });
      const data = response.data;

      if (data.status === "success") {
        const mealPlans = data.data.mealPlans || [];
        const total = data.results || 0;
        const totalPages = data.totalPages || 1;

        const summary = data.data.summary || {
          totalMealPlans: total,
          unpaidMealPlans: 0,
          activeMealPlans: 0,
        };

        console.log("Summary from API (Nutritionist):", summary);

        return {
          success: true,
          data: {
            mealPlans,
            summary,
          },
          total,
          totalPages,
        };
      } else {
        return {
          success: false,
          message: data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch MealPlan",
        };
      }
    } catch (error) {
      console.error(
        "L·ªói khi l·∫•y danh s√°ch MealPlan cho nutritionist:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch MealPlan",
      };
    }
  },

  // L·∫•y chi ti·∫øt m·ªôt MealPlan theo ID
  getMealPlanById: async (id) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${id}`);
      console.log("üîç Chi ti·∫øt MealPlan:", response.data);
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealPlan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng t√¨m th·∫•y MealPlan!" };
    }
  },

  // L·∫•y meal plan c·∫ßn thanh to√°n c·ªßa user
  getUnpaidMealPlanForUser: async (userId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/users/${userId}/unpaid`);
      console.log("üîç MealPlan c·∫ßn thanh to√°n:", response.data);
      return {
        success: response.data.status === "success",
        data: response.data.status === "success" ? response.data.data : null,
        message:
          response.data.status !== "success"
            ? response.data.message || "No unpaid meal plan found"
            : undefined,
      };
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y MealPlan c·∫ßn thanh to√°n:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y MealPlan c·∫ßn thanh to√°n!",
      };
    }
  },

  // Xem chi ti·∫øt meal plan (bao g·ªìm c√°c ng√†y v√† m√≥n ƒÉn)
  getMealPlanDetails: async (mealPlanId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${mealPlanId}/details`);
      console.log("üîç Chi ti·∫øt MealPlan (bao g·ªìm ng√†y v√† m√≥n ƒÉn):", response.data);
      return {
        success: response.data.status === "success",
        data: response.data.status === "success" ? response.data.data : null,
        message:
          response.data.status !== "success"
            ? response.data.message || "Cannot fetch meal plan details"
            : undefined,
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt MealPlan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt MealPlan!" };
    }
  },

  getMealPlanHistory: async (userId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/users/${userId}/history`);
      const historyData = response.data.data || [];
      console.log(`History for user ${userId}:`, historyData);
      return { success: true, data: historyData };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ Meal Plan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ Meal Plan!" };
    }
  },

  // L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa user
  getPaymentHistory: async (userId, page = 1, limit = 10) => {
    try {
      const response = await axiosInstance.get(`/payment/history/${userId}`, {
        params: { page, limit },
      });
      console.log("üîç L·ªãch s·ª≠ giao d·ªãch:", response.data);
      return {
        success: response.data.status === "success",
        data: response.data.status === "success" ? response.data.data : null,
        pagination:
          response.data.status === "success"
            ? response.data.pagination || {
                currentPage: page,
                totalPages: 1,
                totalItems: response.data.data.length,
              }
            : undefined,
        message:
          response.data.status !== "success"
            ? response.data.message || "No payment history found"
            : undefined,
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch!" };
    }
  },

  // T·∫°o y√™u c·∫ßu thanh to√°n cho meal plan
  createMealPlanPayment: async (userId, mealPlanId, amount) => {
    try {
      const response = await axiosInstance.post(`/payment/vnpay/app/pay`, {
        userId,
        mealPlanId,
        amount,
      });
      return response.data;
    } catch (error) {
      console.error("Error in createMealPlanPayment:", error.response?.data || error.message);
      return { success: false, message: error.message };
    }
  },

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n c·ªßa meal plan
  checkPaymentStatus: async (paymentId) => {
    try {
      console.log(`Fetching payment status for paymentId: ${paymentId}`);
      const response = await axiosInstance.get(`/payment/status/${paymentId}`);
      console.log(`Response for payment ${paymentId}:`, response.data);

      if (response.data.status === "success") {
        const paymentData = response.data.data;
        console.log("üîç Tr·∫°ng th√°i thanh to√°n:", paymentData);

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!paymentData.status || !paymentData.amount) {
          console.warn("‚ö†Ô∏è Payment data thi·∫øu tr∆∞·ªùng c·∫ßn thi·∫øt:", paymentData);
          return {
            success: false,
            message: "D·ªØ li·ªáu thanh to√°n kh√¥ng h·ª£p l·ªá",
          };
        }

        return {
          success: true,
          data: paymentData,
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Cannot check payment status",
        };
      }
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:",
        error.response?.data || error.message
      );
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n!",
      };
    }
  },
  // H√†m m·ªõi: G·ªçi vnp_ReturnUrl_App ƒë·ªÉ l·∫•y k·∫øt qu·∫£ thanh to√°n
  checkPaymentReturnUrl: async (returnUrl) => {
    try {
      const response = await axiosInstance.get(returnUrl, {
        responseType: "text", // V√¨ backend tr·∫£ v·ªÅ HTML
      });
      console.log(`Response from vnp_ReturnUrl_App:`, response.data);
      // Ki·ªÉm tra HTML tr·∫£ v·ªÅ ƒë·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i
      const isSuccess = response.data.includes("Th√†nh c√¥ng");
      return {
        success: isSuccess,
        message: isSuccess
          ? "Thanh to√°n ho√†n t·∫•t. ƒêang quay l·∫°i..."
          : "Thanh to√°n kh√¥ng th√†nh c√¥ng.",
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ªçi vnp_ReturnUrl_App:", error.response?.data || error.message);
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n.",
      };
    }
  },

  // L·∫•y MealPlan hi·ªán t·∫°i c·ªßa user
  getUserMealPlan: async (userId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/users/${userId}`);
      return response.data;
    } catch (error) {
      console.error("L·ªói l·∫•y meal plan c·ªßa user:", error);
      throw error;
    }
  },

  // L·∫•y danh s√°ch MealDays theo MealPlan ID
  getMealDaysByMealPlan: async (mealPlanId) => {
    try {
      const response = await axiosInstance.get(`/mealPlan/${mealPlanId}/mealdays`);
      console.log("üîç Danh s√°ch MealDays:", response.data);
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealDays:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y MealDays" };
    }
  },

  getMealDayById: async (mealPlanId, mealDayId) => {
    try {
      const response = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals`
      );
      return { success: true, data: response.data.data || {} };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y MealDay:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y MealDay" };
    }
  },

  // L·∫•y danh s√°ch Meals theo MealDay ID
  getMealsByMealDay: async (mealPlanId, mealDayId) => {
    try {
      const response = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals`
      );
      return { success: true, data: response.data.data || [] };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y Meals:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ l·∫•y Meals" };
    }
  },

  // L·∫•y chi ti·∫øt m·ªôt b·ªØa ƒÉn c·ª• th·ªÉ
  getMealByMealId: async (mealPlanId, mealDayId, mealId) => {
    try {
      const response = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals/${mealId}`
      );
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt b·ªØa ƒÉn:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt b·ªØa ƒÉn",
      };
    }
  },

  createMealPlan: async (mealPlanData) => {
    try {
      const requestData = { ...mealPlanData };
      console.log("üì§ G·ª≠i request POST /mealPlan v·ªõi d·ªØ li·ªáu:", requestData);
      const response = await axiosInstance.post(`/mealPlan`, requestData);
      console.log("‚úÖ Meal Plan ƒë√£ ƒë∆∞·ª£c t·∫°o:", response.data);
      return { success: true, data: response.data.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o Meal Plan:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ t·∫°o Meal Plan!" };
    }
  },

  // Th√™m b·ªØa ƒÉn v√†o ng√†y
  addMealToDay: async (mealPlanId, mealDayId, mealData) => {
    try {
      console.log("üì§ G·ª≠i request POST ƒë·ªÉ th√™m b·ªØa ƒÉn:", mealData);
      const response = await axiosInstance.post(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals`,
        mealData
      );
      console.log("‚úÖ B·ªØa ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m b·ªØa ƒÉn v√†o ng√†y:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ th√™m b·ªØa ƒÉn!" };
    }
  },

  // X√≥a b·ªØa ƒÉn kh·ªèi ng√†y
  removeMealFromDay: async (mealPlanId, mealDayId, mealId) => {
    try {
      console.log("üì§ G·ª≠i request DELETE ƒë·ªÉ x√≥a b·ªØa ƒÉn:", mealId);
      const response = await axiosInstance.delete(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals/${mealId}`
      );
      console.log("‚úÖ B·ªØa ƒÉn ƒë√£ ƒë∆∞·ª£c x√≥a:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a b·ªØa ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ x√≥a b·ªØa ƒÉn!" };
    }
  },

  // Add dish to Meal
  addDishToMeal: async (mealPlanId, mealDayId, mealId, dish) => {
    try {
      const mealsResponse = await axiosInstance.get(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals/${mealId}`
      );
      const existingDishes = mealsResponse.data.data?.dishes || [];
      const isAlreadyAdded = existingDishes.some(
        (existingDish) => existingDish.dishId === dish.dishId
      );
      if (isAlreadyAdded) {
        console.warn("‚ö†Ô∏è Dish already exists in the meal!");
        return {
          success: false,
          message: "This dish has already been added to the meal!",
        };
      }
      const dishData = {
        dishes: [dish],
      };
      console.log(`üì§ Sending POST request with data:`, dishData);
      const response = await axiosInstance.post(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals/${mealId}/dishes`,
        dishData
      );
      console.log("‚úÖ Dish added successfully:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå Error adding dish to Meal:", error.response?.data || error.message);
      const errorMessage = error.response?.data?.message || "Failed to add dish!";
      return { success: false, message: errorMessage };
    }
  },

  getAllDishes: async (page, limit, search = "") => {
    try {
      const response = await axiosInstance.get("/dishes", {
        params: {
          page,
          limit,
          search,
        },
      });
      console.log("üîç Danh s√°ch m√≥n ƒÉn t·ª´ API:", response.data);
      return {
        success: true,
        data: {
          items: response.data.data.items || [],
          total: response.data.data.total || 0,
          currentPage: response.data.data.currentPage || page,
          totalPages: response.data.data.totalPages || 1,
        },
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y m√≥n ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "L·ªói khi t·∫£i danh s√°ch m√≥n ƒÉn" };
    }
  },
  deleteDishFromMeal: async (mealPlanId, mealDayId, mealId, dishId) => {
    try {
      const response = await axiosInstance.delete(
        `/mealPlan/${mealPlanId}/mealdays/${mealDayId}/meals/${mealId}/dishes/${dishId}`
      );
      console.log("‚úÖ M√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c x√≥a:", response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a m√≥n ƒÉn:", error.response?.data || error.message);
      return { success: false, message: "Kh√¥ng th·ªÉ x√≥a m√≥n ƒÉn!" };
    }
  },

  // Status MealPlan Pause/Resume
  toggleMealPlanStatus: async (mealPlanId, isPause) => {
    try {
      console.log(`üì§ ${isPause ? "Pausing" : "Resuming"} MealPlan ID: ${mealPlanId}`);
      const response = await axiosInstance.patch(`/mealPlan/${mealPlanId}/toggle`, {
        isPause,
      });
      console.log(`‚úÖ MealPlan has been ${isPause ? "paused" : "resumed"}:`, response.data);
      if (response.data.success) {
        if (response.data.message?.includes("failed to update reminders")) {
          console.warn("‚ö†Ô∏è Reminders could not be updated:", response.data.message);
        }
        return { success: true, data: response.data.data };
      } else {
        return {
          success: false,
          message: response.data.message || `Could not ${isPause ? "pause" : "resume"} MealPlan!`,
        };
      }
    } catch (error) {
      console.error(
        `‚ùå Error while ${isPause ? "pausing" : "resuming"} MealPlan:`,
        error.response?.data || error.message
      );
      return {
        success: false,
        message:
          error.response?.data?.message || `Could not ${isPause ? "pause" : "resume"} MealPlan!`,
      };
    }
  },

  // C·∫≠p nh·∫≠t h√†m getPaymentHistoryForNutritionist
  getPaymentHistoryForNutritionist: async () => {
    try {
      const response = await axiosInstance.get(`/payment/history/nutritionist`);
      console.log("üîç Raw response from /payment/history/nutritionist:", response.data);
      if (response.data.success) {
        const payments = response.data.data || [];
        console.log("üîç All Payments fetched in service:", payments);
        return { success: true, data: payments };
      } else {
        console.log("‚ö†Ô∏è API returned non-success status:", response.data);
        return {
          success: false,
          message: response.data.message || "No payment history found",
        };
      }
    } catch (error) {
      console.error("‚ùå Error fetching payment history:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Cannot fetch payment history!",
        error: error.response?.status,
      };
    }
  },

  // X√≥a MealPlan
  deleteMealPlan: async (id) => {
    try {
      console.log(`üóëÔ∏è X√≥a MealPlan ID: ${id}`);
      await axiosInstance.delete(`/mealPlan/${id}`);
      return { success: true };
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a MealPlan:", error.response?.data || error.message);
      return { success: false, message: "X√≥a MealPlan th·∫•t b·∫°i!" };
    }
  },

  calculateSalary: async (nutriId) => {
    try {
      const response = await axiosInstance.get(`/payment/calculate-salary/${nutriId}`);
      return {
        success: response.data.status === "success",
        data: response.data.data,
        message: response.data.message || "T√≠nh l∆∞∆°ng th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi t√≠nh l∆∞∆°ng:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ t√≠nh l∆∞∆°ng",
      };
    }
  },

  sendSalaryEmail: async (nutriId) => {
    try {
      const response = await axiosInstance.post("/payment/send-salary-email", {
        nutriId,
      });
      return {
        success: response.data.status === "success",
        message: response.data.message || "Email g·ª≠i th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i email l∆∞∆°ng:", error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i email l∆∞∆°ng",
      };
    }
  },
};

export default mealPlanService;
